#!/usr/bin/env perl

# Extract all nucleotide or amino acid sequence from a gff file.

use strict;
use warnings;
use Bio::Perl;

# stop codons
my %stop_codons = (

    TAA  => 1,
    TGA => 1,
    TAG  => 1,
    
);

# start codons 
my %start_codons = (

    ATG  => 1,
    GTG => 1, # alt 
    TTG  => 1, # alt
    
);

# input/output
my $sample = $ARGV[0];
my $pirate_dir = $ARGV[1];
my $output_file = $ARGV[2];

# check for nucleotide or amino acid sequence.
my $nuc = 0;
if ( defined($ARGV[3]) ) {
	if( $ARGV[3] eq "nucl" ){
		$nuc = 1;
	}
}

# length threshold
my $length_threshold = 120;

# check for presence of output file - must be created beforehand
die "No output file.\n" unless -f $output_file;  

# variables
my $include = 0;
my %contig_hash;
my $contig_id = "";
my $count = 0;

# Open gff and store contig sequence.
open INPUT, "$pirate_dir/modified_gffs/$sample.gff" or die $!;
while(<INPUT>){
	
	my $line=$_;
	chomp $line;

	++$count;

	# start storing sequence after fasta header.
	if($line =~ /^##FASTA/){ 
		$include = 1; 
	}
	elsif( $include == 1){
		
		# header is used as contig id.
		if($line =~ /^>(\S+)/){
			$contig_id = $1;		
		}
		# sequence is stored in hash.
		elsif($line =~ /^([ATGCNatcgn]+)*/){

			# sanity check - each contig should have id
			die "Contig has no header" if $contig_id eq "" ;
			
			# store uppercase sequence.
			my $seq = $1;
			$seq = uc($seq);
	
			# concatenate sequence if it is already present in the hash.
			if(!$contig_hash{$contig_id}){
				$contig_hash{$contig_id}=$seq;
			}else{
				$contig_hash{$contig_id}=$contig_hash{$contig_id}.$seq;
			}
			
		}else{
			print "Warning: unexpected characters in line $count for sample $sample\n";
		}
	}
	
}close INPUT;

#Parse co-ordinate file.
open COORDS, "$pirate_dir/co-ords/$sample.co-ords.tab" or die $!;
while(<COORDS>){
	unless(/^Name\tGene/){
	
		my $line = $_;
		chomp $line;
	
		my @line = split(/\t/,$line);
		
		my $locus_tag = $line[0];			
	
		# Find sequence, revcomp if necessary.			
		my $start = $line[2];
		my $len = $line[4];				
		my $strand = $line[6];
		my $contig = $line[7];			
	
		# Prepare for output
		my $seq = substr($contig_hash{$contig}, $start-1, $len); # account for zero indexing
		
		# revcomp if necessary.
		if($strand eq "Reverse"){
			$seq = reverse_complement($seq)->seq();
		}
		
		# check for errors
		if( $seq eq "" ){
			print "Warning: no sequence for $locus_tag\n";
		}
		
		# length of sequence 
		my $l = length($seq);
		
		# exclude sequences if they do not match a number or criteria.
		my $include = 1;
		
		# must be divisible by 3 
		if( ($l % 3) != 0 ){
			$include = 0;
		}
		
		# have consensus stop codon.
		if ( ! $stop_codons{substr($seq, -3)} ){
			$include = 0;
		}
		
		# have consensus start codon.
		if ( ! $start_codons{substr($seq, 0, 3)} ){
			$include = 0;
		}
		
		# have <5% Ns
		my $ns = () = $seq =~ /N/;
		if( ($ns/$l) > "0.05" ){
			$include = 0;
		}
		
		# exclude sequences < length_threshold
		if ( $l <= $length_threshold ){
			$include = 0;
		}
		
		if ( $include == 1 ){
		
			# optionally tranlate to amino acid sequence.
			if( $nuc == 0 ){
				$seq = translate($seq)->seq();
			}	
		
			# Find appropriate output filename.					
			open OUTFILE, ">>$output_file" or die $!;		
			print OUTFILE ">$locus_tag\n$seq\n";
			close OUTFILE;
			
		}
	
	}
	
}close COORDS;

exit

